import groovy.json.JsonOutput

buildscript {
  repositories {
    // These repositories are only for Gradle plugins, put any other repositories in the repository block further below
    maven { url = 'https://files.minecraftforge.net/maven' }
    maven { url = 'https://maven.minecraftforge.net' }
    maven { url = 'https://maven.parchmentmc.org' }
    maven {
      url = 'https://repo.spongepowered.org/repository/maven-public/'
      content { includeGroup "org.spongepowered" }
    }
    mavenCentral()
    jcenter()
    gradlePluginPortal()
  }
  dependencies {
    classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '5.1.+', changing: true
    classpath 'org.parchmentmc:librarian:1.+'
    classpath 'org.spongepowered:mixingradle:0.7-SNAPSHOT'
    classpath "org.jetbrains.kotlin:kotlin-stdlib:${kotlin_lang_version}"
    classpath "org.jetbrains.kotlin:kotlin-serialization:${kotlin_lang_version}"
    classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:${kotlin_lang_version}"
//    classpath 'gradle.plugin.com.github.johnrengelman:shadow:8.0.0'
    classpath 'gradle.plugin.com.github.johnrengelman:shadow:7.1.2'
  }
}
// Only edit below this line, the above code adds and enables the necessary things for Forge to be setup.
plugins {
  id 'org.jetbrains.kotlin.jvm' version "${kotlin_lang_version}"
  id 'org.jetbrains.kotlin.plugin.serialization' version "${kotlin_lang_version}"
  id 'idea'
  id 'com.github.johnrengelman.shadow' version '7.1.2'
  id 'maven-publish'
}
apply plugin: 'net.minecraftforge.gradle'
apply plugin: 'org.parchmentmc.librarian.forgegradle'
// apply plugin: 'org.spongepowered.mixin'

// https://raw.githubusercontent.com/thedarkcolour/KotlinForForge/site/thedarkcolour/kotlinforforge/gradle/kff-3.1.0.gradle

configurations {
  compile.extendsFrom(shade)
}

version = "${creatania_currentversion}"
group = 'zaftnotameni.creatania' // http://maven.apache.org/guides/mini/guide-naming-conventions.html
archivesBaseName = 'creatania'

java.toolchain.languageVersion = JavaLanguageVersion.of(17)

println "Java: ${System.getProperty 'java.version'}, JVM: ${System.getProperty 'java.vm.version'} (${System.getProperty 'java.vendor'}), Arch: ${System.getProperty 'os.arch'}"
minecraft {
  // mappings channel: 'official', version: '1.18.2'
  mappings channel: 'parchment', version: '2022.11.06-1.18.2'
  // Default run configurations.
  // These can be tweaked, removed, or duplicated as needed.
  runs {
    client {
      workingDirectory project.file('run')

      // Recommended logging data for a userdev environment
      // The markers can be added/remove as needed separated by commas.
      // "SCAN": For mods scan.
      // "REGISTRIES": For firing of registry events.
      // "REGISTRYDUMP": For getting the contents of all registries.
      property 'forge.logging.markers', 'REGISTRIES'

      property 'forge.logging.console.level', 'debug'
      property 'forge.enabledGameTestNamespaces', 'creatania'

      property 'mixin.env.remapRefMap', 'true'
      property 'mixin.env.refMapRemappingFile', "${projectDir}/build/createSrgToMcp/output.srg"

      mods {
        creatania {
          source sourceSets.main
        }
      }
    }

    server {
      workingDirectory project.file('run')

      property 'forge.logging.markers', 'REGISTRIES'

      property 'forge.logging.console.level', 'debug'

      property 'forge.enabledGameTestNamespaces', 'creatania'

      property 'mixin.env.remapRefMap', 'true'
      property 'mixin.env.refMapRemappingFile', "${projectDir}/build/createSrgToMcp/output.srg"

      mods {
        creatania {
          source sourceSets.main
        }
      }
    }

    gameTestServer {
      workingDirectory project.file('run')
      // "SCAN": For mods scan.
      // "REGISTRIES": For firing of registry events.
      // "REGISTRYDUMP": For getting the contents of all registries.
      property 'forge.logging.markers', 'REGISTRIES'
      property 'forge.logging.console.level', 'debug'
      property 'forge.enabledGameTestNamespaces', 'creatania'

      property 'mixin.env.remapRefMap', 'true'
      property 'mixin.env.refMapRemappingFile', "${projectDir}/build/createSrgToMcp/output.srg"
      mods {
        creatania {
          source sourceSets.main
        }
      }
    }

    data {
      workingDirectory project.file('run')

      property 'forge.logging.markers', 'REGISTRIES'

      property 'forge.logging.console.level', 'debug'

      // Specify the modid for data generation, where to output the resulting resource, and where to look for existing resources.
      args '--mod', 'creatania', '--all', '--output', file('src/generated/resources/'), '--existing', file('src/main/resources/')

      property 'mixin.env.remapRefMap', 'true'
      property 'mixin.env.refMapRemappingFile', "${projectDir}/build/createSrgToMcp/output.srg"

      mods {
        creatania {
          source sourceSets.main
        }
      }
    }
  }
}

// Include resources generated by data generators.
sourceSets.main.resources { srcDir 'src/generated/resources' }


repositories {

  // Put repositories for dependencies here
  // ForgeGradle automatically adds the Forge maven and Maven Central for you
  // Add KFF Maven repository
  maven {
    name = 'Kotlin for Forge'
    url = 'https://thedarkcolour.github.io/KotlinForForge/'
  }
  // If you have mod jar dependencies in ./libs, you can declare them as a repository like so:
  // flatDir {
  //     dir 'libs'
  // }
  flatDir {
    dirs 'libs'
  }
  maven {
    url "file://${project.projectDir}/libs"
    name "test"
  }
  maven {
    // Shedaniel's maven (Architectury API)
    url = "https://maven.architectury.dev"
    content {
      includeGroup "dev.architectury"
    }
  }

  maven {
    // saps.dev Maven (KubeJS and Rhino)
    url = "https://maven.saps.dev/minecraft"
    content {
      includeGroup "dev.latvian.mods"
    }
  }
  maven {
    // location of the maven that hosts JEI files
    name = "Progwml6 maven"
    url = "https://dvs1.progwml6.com/files/maven/"
  }
  maven {
    // location of a maven mirror for JEI files, as a fallback
    name = "ModMaven"
    url = "https://modmaven.dev"
  }
  maven { url 'https://maven.blamejared.com' }
  maven {
    name = 'tterrag maven'
    url = 'https://maven.tterrag.com/'
  }
  maven {
    name = 'Sponge Snapshots'
    url = 'https://repo.spongepowered.org/repository/maven-public/'
  }

}

shadowJar {
  classifier = 'shadow'
  configurations = [project.configurations.shade]
}
tasks.jarJar.configure {
  classifier 'jarjar'
}
jar {
  classifier ''
}
jarJar.enable()
reobf { jarJar { } }
tasks.jarJar.finalizedBy('reobfJarJar')
//tasks.jarJar.configure {
//
//}
dependencies {
  minecraft 'net.minecraftforge:forge:1.18.2-40.2.4'

//  shade "org.jetbrains.kotlin:kotlin-stdlib:${kotlin_lang_version}"
//  shade "org.jetbrains.kotlin:kotlin-reflect:${kotlin_lang_version}"
//  shade "org.jetbrains:annotations:22.0.0"
//  shade "org.jetbrains.kotlinx:kotlinx-coroutines-core:${coroutines_version}"
//  shade "org.jetbrains.kotlinx:kotlinx-serialization-core-jvm:${serialization_version}"
//  shade "org.jetbrains.kotlinx:kotlinx-serialization-json-jvm:${serialization_version}"
//
//  jarJar(group: "org.jetbrains.kotlin", name: 'kotlin-stdlib', version: "[${kotlin_lang_version},)")
//  jarJar(group: "org.jetbrains.kotlin", name: 'kotlin-reflect', version: "[${kotlin_lang_version},)")
//  jarJar(group: "org.jetbrains", name: "annotations", version: "[22.0.0,)")
//  jarJar(group: "org.jetbrains.kotlinx", name: 'kotlinx-coroutines-core', version: "[${coroutines_version},)")
//  jarJar(group: "org.jetbrains.kotlinx", name: 'kotlinx-serialization-core-jvm', version: "[${serialization_version},)")
//  jarJar(group: "org.jetbrains.kotlinx", name: 'kotlinx-serialization-json-jvm', version: "[${serialization_version},)")
//
//  implementation "org.jetbrains.kotlin:kotlin-stdlib:${kotlin_lang_version}"
//  implementation "org.jetbrains.kotlin:kotlin-reflect:${kotlin_lang_version}"
//  implementation "org.jetbrains:annotations:22.0.0"
//  implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core:${coroutines_version}"
//  implementation "org.jetbrains.kotlinx:kotlinx-serialization-core-jvm:${serialization_version}"
//  implementation "org.jetbrains.kotlinx:kotlinx-serialization-json-jvm:${serialization_version}"

  compileOnly fg.deobf("mezz.jei:jei-${mc_version}:${jei_version}:api")
  runtimeOnly fg.deobf("mezz.jei:jei-${mc_version}:${jei_version}")

  compileOnly fg.deobf("top.theillusivec4.curios:curios-forge:1.18.2-5.0.6.3:api")
  runtimeOnly fg.deobf("top.theillusivec4.curios:curios-forge:1.18.2-5.0.6.3")

  compileOnly fg.deobf("vazkii.patchouli:Patchouli:1.18.2-67:api")
  runtimeOnly fg.deobf("vazkii.patchouli:Patchouli:1.18.2-67")

  compileOnly fg.deobf("vazkii.botania:Botania:${botania_version}:api")
  runtimeOnly fg.deobf("vazkii.botania:Botania:${botania_version}")

  implementation fg.deobf("com.simibubi.create:create-${create_minecraft_version}:${create_version}:slim") { transitive = false }
  implementation fg.deobf("com.jozufozu.flywheel:flywheel-forge-${flywheel_minecraft_version}:${flywheel_version}")
  implementation fg.deobf("com.tterrag.registrate:Registrate:${registrate_version}")

  implementation fg.deobf("dev.latvian.mods:kubejs-forge:${kubejs_version}")

  implementation fg.deobf("dev.latvian.mods:rhino-forge:${rhino_version}")
  implementation fg.deobf("dev.architectury:architectury-forge:${architectury_version}")

  implementation fg.deobf("blank:ponderjs-1.18.2:1.1.8")

  implementation 'thedarkcolour:kotlinforforge:3.10.0'
}


task deobfJar(type: Jar) {
  from sourceSets.main.output
  classifier 'deobf'
}

// Example for how to get properties into the manifest for reading at runtime.
jar {
  manifest {
    attributes([
      "Specification-Title"     : "creatania",
      "Specification-Vendor"    : "zaftnotameni",
      "Specification-Version"   : "${creatania_currentversion}", // We are version 1 of ourselves
      "Implementation-Title"    : project.name,
      "Implementation-Version"  : project.jar.archiveVersion,
      "Implementation-Vendor"   : "zaftnotameni",
      "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
    ])
  }
  from {
    configurations.compileClasspath.collect { it.isDirectory() ? it : zipTree(it) }
    duplicatesStrategy 'exclude'
  }
}

jar.finalizedBy('reobfJar')
shadowJar.finalizedBy('reobfJar')
tasks.jarJar.finalizedBy('reobfJar')
tasks.build.dependsOn shadowJar
// tasks.jar.dependsOn shadowJar
// However if you are in a multi-project build, dev time needs unobfed jar files, so you can delay the obfuscation until publishing by doing
// publish.dependsOn('reobfJar')

kotlin {
  jvmToolchain(17)
}

compileKotlin {
  kotlinOptions.jvmTarget = '17'
}

publishing {
  publications {
    mavenJava(MavenPublication) {
      artifact jar
    }
  }
  repositories {
    maven {
      url "file://${project.projectDir}/mcmodsrepo"
    }
  }
}

tasks.withType(JavaCompile).configureEach {
  options.encoding = 'UTF-8' // Use the UTF-8 charset for Java compilation
}

def f = "${project.rootDir}/kubejs"
def t = "${project.rootDir}/run/kubejs"
tasks.register('ck', Copy) {
  println("copying kubejs from ${f} to ${t}")
  from f
  into t
  println("copied kubejs")
}

def kubejs_assets_from = "${project.rootDir}/kubejs/assets/creatania"
def kubejs_assets_to = "${project.rootDir}/src/main/resources/data/kubejs/assets/creatania"
tasks.register('copy_kubejs_assets', Copy) {
  println("copying kubejs assets from root: ${kubejs_assets_from} to data folder: ${kubejs_assets_to}")
  from kubejs_assets_from
  into kubejs_assets_to
  println("copied kubejs to data folder")
}
def kubejs_client_from = "${project.rootDir}/kubejs/client_scripts/creatania"
def kubejs_client_to = "${project.rootDir}/src/main/resources/data/kubejs/client_scripts/creatania"
tasks.register('copy_kubejs_client_scripts', Copy) {
  println("copying kubejs assets from root: ${kubejs_client_from} to data folder: ${kubejs_client_to}")
  from kubejs_client_from
  into kubejs_client_to
  println("copied kubejs to data folder")
}

def starting_point = "${project.rootDir}/src/main/resources/data/kubejs/"
def destination_json = "${project.rootDir}/src/main/resources/data/creatania/kubejs_metadata.json"
def dir = new File(starting_point)
def destination_file = new File(destination_json)
def file_list = []
tasks.register('create_kubejs_metadata') {
  doLast {
    try {
      dir.eachFileRecurse (groovy.io.FileType.FILES) { file -> file_list << file  }
      file_list.each { println it.absolutePath }
      destination_file.write(JsonOutput.prettyPrint(JsonOutput.toJson([
        targetResources: file_list.collect {
          it.absolutePath.replace("\\", "/").split('kubejs/')[1]
        }
      ])))
    } catch (Throwable tw) { println tw }
  }
}

def patchouli_dev = "${project.rootDir}/patchouli_dev/data"
def patchouli_mod = "${project.rootDir}/src/main/resources/data"
tasks.register('patchouli', Copy) {
  println("copying patchouli from ${patchouli_dev} to ${patchouli_mod}")
  from patchouli_dev
  into patchouli_mod
  filter { line -> line.replaceAll("\\(l:patchouli:", "\\(l:creatania:")
          .replaceAll("\"category\": \"patchouli:", "\"category\": \"creatania:") }
  println("copied patchouli")
}

artifacts {
  archives shadowJar
  archives jar
}

task prepare_for_publishing {
  dependsOn 'patchouli'
  dependsOn 'copy_kubejs_assets'
  dependsOn 'copy_kubejs_client_scripts'
  dependsOn 'create_kubejs_metadata'
  dependsOn 'jar'
  tasks.findByName('jar').mustRunAfter 'create_kubejs_metadata'
  tasks.findByName('create_kubejs_metadata').mustRunAfter 'copy_kubejs_client_scripts'
  tasks.findByName('copy_kubejs_client_scripts').mustRunAfter 'copy_kubejs_assets'
  tasks.findByName('copy_kubejs_assets').mustRunAfter 'patchouli'
}
